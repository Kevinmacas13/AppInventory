{
    "version": 3,
    "checkpoint": {
        "stack": "organization/inventario/staging",
        "latest": {
            "manifest": {
                "time": "2025-08-19T15:56:31.6858056-05:00",
                "magic": "77be084e65c763fde87b290a0a6ba5aaacad687cde41d20d76768df34b0db77a",
                "version": "v3.146.0"
            },
            "secrets_providers": {
                "type": "passphrase",
                "state": {
                    "salt": "v1:bSwiFmXTCUo=:v1:zp5s9GuPn1cpSN4+:r4YpXlTdKD7qaJEfRKnFyagbFYXzqA=="
                }
            },
            "resources": [
                {
                    "urn": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "custom": false,
                    "type": "pulumi:pulumi:Stack",
                    "outputs": {
                        "_protect": false,
                        "api": "https://zf2diku5sbjcj3zyenbqhzzeyq0nnnvm.lambda-url.us-east-1.on.aws/",
                        "web": "https://d31whwn9krmyev.cloudfront.net"
                    },
                    "created": "2025-08-02T03:51:33.6868399Z",
                    "modified": "2025-08-02T03:51:33.6868399Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "custom": false,
                    "type": "sst:aws:StaticSite",
                    "outputs": {
                        "_dev": {
                            "autostart": true,
                            "command": "npm run dev",
                            "directory": "apps/inventario-app/dist",
                            "environment": {}
                        },
                        "_hint": "https://d31whwn9krmyev.cloudfront.net",
                        "_metadata": {
                            "environment": {},
                            "mode": "deployed",
                            "path": "apps/inventario-app/dist",
                            "url": "https://d31whwn9krmyev.cloudfront.net"
                        }
                    },
                    "parent": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "created": "2025-08-02T14:42:19.2239977Z",
                    "modified": "2025-08-02T14:42:19.2239977Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:sst:LinkRef::webLinkRef",
                    "custom": false,
                    "type": "sst:sst:LinkRef",
                    "outputs": {
                        "properties": {
                            "type": "sst.aws.StaticSite",
                            "url": "https://d31whwn9krmyev.cloudfront.net"
                        },
                        "target": "web"
                    },
                    "parent": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "created": "2025-08-02T14:42:16.3449553Z",
                    "modified": "2025-08-02T14:42:16.3449553Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_hint": "https://zf2diku5sbjcj3zyenbqhzzeyq0nnnvm.lambda-url.us-east-1.on.aws/",
                        "_metadata": {
                            "dev": false,
                            "handler": "apps/api/handler.handler"
                        }
                    },
                    "parent": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "created": "2025-08-02T03:54:28.7071456Z",
                    "modified": "2025-08-02T03:54:28.7071456Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:sst:LinkRef::apiLinkRef",
                    "custom": false,
                    "type": "sst:sst:LinkRef",
                    "outputs": {
                        "include": [
                            {
                                "actions": [
                                    "lambda:InvokeFunction"
                                ],
                                "resources": [
                                    {
                                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                        "ciphertext": "v1:1LpIk8qHxWCNA0qr:MCffl4uwROH66p5mo641gwgjdOzUO7EY/L38+zEIOkbnLZrUdkQIQEWEkXh1O+4JhD/0w7jzReYYin7iGPc21XiaS2jF9+yRChjoQT/4FmTFb8nwKe2QlNHEQ60W4YKy79tnH6Ir1/8="
                                    }
                                ],
                                "type": "aws.permission"
                            }
                        ],
                        "properties": {
                            "name": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "v1:vSzRWCzAyC6cyfD/:VnoqBpkQXkE8R3lpyOYGBk1hr/eJzLsXzezvoon1vDiG/FBgbUVcLONf9tCQ/cYvYPrRozhR4bVi"
                            },
                            "type": "sst.aws.Function",
                            "url": "https://zf2diku5sbjcj3zyenbqhzzeyq0nnnvm.lambda-url.us-east-1.on.aws/"
                        },
                        "target": "api"
                    },
                    "parent": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "created": "2025-08-02T03:51:41.7635625Z",
                    "modified": "2025-08-02T03:51:41.7635625Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket::webAssets",
                    "custom": false,
                    "type": "sst:aws:Bucket",
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "created": "2025-08-02T14:42:19.6384497Z",
                    "modified": "2025-08-02T14:42:19.6384497Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN::webCdn",
                    "custom": false,
                    "type": "sst:aws:CDN",
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "created": "2025-08-02T14:42:19.6297206Z",
                    "modified": "2025-08-02T14:42:19.6297206Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2",
                    "custom": true,
                    "id": "86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "type": "pulumi:providers:aws",
                    "inputs": {
                        "__internal": {},
                        "defaultTags": "{\"tags\":{\"sst:app\":\"inventario\",\"sst:stage\":\"staging\"}}",
                        "region": "us-east-1",
                        "skipCredentialsValidation": "false",
                        "skipRegionValidation": "true",
                        "version": "6.66.2"
                    },
                    "outputs": {
                        "defaultTags": "{\"tags\":{\"sst:app\":\"inventario\",\"sst:stage\":\"staging\"}}",
                        "region": "us-east-1",
                        "skipCredentialsValidation": "false",
                        "skipRegionValidation": "true",
                        "version": "6.66.2"
                    },
                    "created": "2025-08-02T03:54:28.6888125Z",
                    "modified": "2025-08-02T03:54:28.6888125Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::pulumi:providers:random::default_4_16_6",
                    "custom": true,
                    "id": "90615d89-3138-4d05-8f4a-7c038ba283bc",
                    "type": "pulumi:providers:random",
                    "inputs": {
                        "__internal": {},
                        "version": "4.16.6"
                    },
                    "outputs": {
                        "version": "4.16.6"
                    },
                    "created": "2025-08-02T03:55:12.1277669Z",
                    "modified": "2025-08-02T03:55:12.1277669Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::random:index/randomBytes:RandomBytes::LambdaEncryptionKey",
                    "custom": true,
                    "id": "gZ16rICG7oK49dyIUAeU2BNscGJ6+JgA74oSHL5Irhk=",
                    "type": "random:index/randomBytes:RandomBytes",
                    "inputs": {
                        "length": 32
                    },
                    "outputs": {
                        "base64": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "v1:f74S0jIGmk9KeUWL:kzS9d9f8L+5ahRBu3k7Mg3j/thl6eAxs27DIEBgbceVLqMrv30yz0/J3jMcMC+Qk9QVXe3K2xYsJKsS2XuU="
                        },
                        "hex": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "v1:OdArG7H9wszsWtrC:3druMxCv4/FWP3CucMdqZYsf8HHgqVdpRWxxpstqwT1zJcaRN7eN49a4N6u2j6PMnbrWBqTSZ3aylc8zyBij849Ah0nodUvfFoX/57j9cgzgzg=="
                        },
                        "length": 32
                    },
                    "parent": "urn:pulumi:staging::inventario::pulumi:pulumi:Stack::inventario-staging",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:random::default_4_16_6::90615d89-3138-4d05-8f4a-7c038ba283bc",
                    "propertyDependencies": {
                        "length": []
                    },
                    "additionalSecretOutputs": [
                        "base64",
                        "hex"
                    ],
                    "created": "2025-08-02T03:55:12.3662402Z",
                    "modified": "2025-08-02T03:55:12.3662402Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/keyValueStore:KeyValueStore::webKvStore",
                    "custom": true,
                    "id": "inventario-staging-webKvStore-ewsrrarw",
                    "type": "aws:cloudfront/keyValueStore:KeyValueStore",
                    "inputs": {
                        "name": "inventario-staging-webKvStore-ewsrrarw"
                    },
                    "outputs": {
                        "arn": "arn:aws:cloudfront::241291598884:key-value-store/31cc2cb4-3800-4760-85bd-b1b408ce7125",
                        "etag": "E3UN6WX5RRO2AG",
                        "id": "inventario-staging-webKvStore-ewsrrarw",
                        "lastModifiedTime": "2025-08-02T14:43:38Z",
                        "name": "inventario-staging-webKvStore-ewsrrarw"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "name": []
                    },
                    "created": "2025-08-02T14:43:38.6951108Z",
                    "modified": "2025-08-02T14:43:38.6951108Z",
                    "ignoreChanges": [
                        "name"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::apiLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                        "retentionInDays": 30,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh",
                        "id": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                        "namePrefix": "",
                        "retentionInDays": 30,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2025-08-02T03:55:13.1056181Z",
                    "modified": "2025-08-02T03:55:13.1056181Z",
                    "ignoreChanges": [
                        "name"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket",
                    "custom": true,
                    "id": "inventario-staging-webassetsbucket-rzscnzou",
                    "type": "aws:s3/bucketV2:BucketV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "forceDestroy": true,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":1200000000000,\"delete\":3600000000000,\"read\":1200000000000,\"update\":1200000000000}}",
                        "accelerationStatus": "",
                        "acl": null,
                        "arn": "arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou",
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "bucketDomainName": "inventario-staging-webassetsbucket-rzscnzou.s3.amazonaws.com",
                        "bucketPrefix": "",
                        "bucketRegionalDomainName": "inventario-staging-webassetsbucket-rzscnzou.s3.us-east-1.amazonaws.com",
                        "corsRules": [],
                        "forceDestroy": true,
                        "grants": [
                            {
                                "id": "e449ec0f436e905f3da043b93c8cf9c809b83f13a6b528d3290a92337d0380a5",
                                "permissions": [
                                    "FULL_CONTROL"
                                ],
                                "type": "CanonicalUser",
                                "uri": ""
                            }
                        ],
                        "hostedZoneId": "Z3AQBSTGFYJSTF",
                        "id": "inventario-staging-webassetsbucket-rzscnzou",
                        "lifecycleRules": [],
                        "loggings": [],
                        "objectLockConfiguration": null,
                        "objectLockEnabled": false,
                        "policy": "",
                        "region": "us-east-1",
                        "replicationConfigurations": [],
                        "requestPayer": "BucketOwner",
                        "serverSideEncryptionConfigurations": [
                            {
                                "rules": [
                                    {
                                        "applyServerSideEncryptionByDefaults": [
                                            {
                                                "kmsMasterKeyId": "",
                                                "sseAlgorithm": "AES256"
                                            }
                                        ],
                                        "bucketKeyEnabled": false
                                    }
                                ]
                            }
                        ],
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "versionings": [
                            {
                                "enabled": false,
                                "mfaDelete": false
                            }
                        ],
                        "websiteDomain": null,
                        "websiteEndpoint": null,
                        "websites": []
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket::webAssets",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "bucket": [],
                        "forceDestroy": []
                    },
                    "created": "2025-08-02T14:42:21.9303127Z",
                    "modified": "2025-08-02T14:42:21.9303127Z",
                    "ignoreChanges": [
                        "bucket"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/function:Function::webCloudfrontFunctionRequest",
                    "custom": true,
                    "id": "inventario-staging-webCloudfrontFunctionRequest-zubowshx",
                    "type": "aws:cloudfront/function:Function",
                    "inputs": {
                        "__defaults": [
                            "publish"
                        ],
                        "code": "\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  \n  \n  \nasync function routeSite(kvNamespace, metadata) {\n  const baselessUri = metadata.base\n    ? event.request.uri.replace(metadata.base, \"\")\n    : event.request.uri;\n\n  // Route to S3 files\n  try {\n    // check using baselessUri b/c files are stored in the root\n    const u = decodeURIComponent(baselessUri);\n    const postfixes = u.endsWith(\"/\")\n      ? [\"index.html\"]\n      : [\"\", \".html\", \"/index.html\"];\n    const v = await Promise.any(postfixes.map(p => cf.kvs().get(kvNamespace + \":\" + u + p).then(v => p)));\n    // files are stored in a subdirectory, add it to the request uri\n    event.request.uri = metadata.s3.dir + event.request.uri + v;\n    setS3Origin(metadata.s3.domain);\n    return;\n  } catch (e) {}\n\n  // Route to S3 routes\n  if (metadata.s3 && metadata.s3.routes) {\n    for (var i=0, l=metadata.s3.routes.length; i<l; i++) {\n      const route = metadata.s3.routes[i];\n      if (baselessUri.startsWith(route)) {\n        event.request.uri = metadata.s3.dir + event.request.uri;\n        // uri ends with /, ie. /usage/ -> /usage/index.html\n        if (event.request.uri.endsWith(\"/\")) {\n          event.request.uri += \"index.html\";\n        }\n        // uri ends with non-file, ie. /usage -> /usage/index.html\n        else if (!event.request.uri.split(\"/\").pop().includes(\".\")) {\n          event.request.uri += \"/index.html\";\n        }\n        setS3Origin(metadata.s3.domain);\n        return;\n      }\n    }\n  }\n\n  // Route to S3 custom 404 (no servers)\n  if (metadata.custom404) {\n    event.request.uri = metadata.s3.dir + (metadata.base ? metadata.base : \"\") + metadata.custom404;\n    setS3Origin(metadata.s3.domain);\n    return;\n  }\n\n  // Route to image optimizer\n  if (metadata.image && baselessUri.startsWith(metadata.image.route)) {\n    setUrlOrigin(metadata.image.host);\n    return;\n  }\n\n  // Route to servers\n  if (metadata.servers){\n    event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n    \n    for (var key in event.request.querystring) {\n      if (key.includes(\"/\")) {\n        event.request.querystring[encodeURIComponent(key)] = event.request.querystring[key];\n        delete event.request.querystring[key];\n      }\n    }\n    setNextjsGeoHeaders();\n    setNextjsCacheKey();\n    setUrlOrigin(findNearestServer(metadata.servers), metadata.origin);\n  }\n\n  function setNextjsGeoHeaders() {\n    \n    if(event.request.headers[\"cloudfront-viewer-city\"]) {\n      event.request.headers[\"x-open-next-city\"] = event.request.headers[\"cloudfront-viewer-city\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-country\"]) {\n      event.request.headers[\"x-open-next-country\"] = event.request.headers[\"cloudfront-viewer-country\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-region\"]) {\n      event.request.headers[\"x-open-next-region\"] = event.request.headers[\"cloudfront-viewer-region\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-latitude\"]) {\n      event.request.headers[\"x-open-next-latitude\"] = event.request.headers[\"cloudfront-viewer-latitude\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-longitude\"]) {\n      event.request.headers[\"x-open-next-longitude\"] = event.request.headers[\"cloudfront-viewer-longitude\"];\n    }\n  }\n\n  function setNextjsCacheKey() {\n    \n    var cacheKey = \"\";\n    if (event.request.uri.startsWith(\"/_next/image\")) {\n      cacheKey = getHeader(\"accept\");\n    } else {\n      cacheKey =\n        getHeader(\"rsc\") +\n        getHeader(\"next-router-prefetch\") +\n        getHeader(\"next-router-state-tree\") +\n        getHeader(\"next-url\") +\n        getHeader(\"x-prerender-revalidate\");\n    }\n    if (event.request.cookies[\"__prerender_bypass\"]) {\n      cacheKey += event.request.cookies[\"__prerender_bypass\"]\n        ? event.request.cookies[\"__prerender_bypass\"].value\n        : \"\";\n    }\n    var crypto = require(\"crypto\");\n    var hashedKey = crypto.createHash(\"md5\").update(cacheKey).digest(\"hex\");\n    event.request.headers[\"x-open-next-cache-key\"] = { value: hashedKey };\n  }\n\n  function getHeader(key) {\n    var header = event.request.headers[key];\n    if (header) {\n      if (header.multiValue) {\n        return header.multiValue.map((header) => header.value).join(\",\");\n      }\n      if (header.value) {\n        return header.value;\n      }\n    }\n    return \"\";\n  }\n\n  function findNearestServer(servers) {\n    if (servers.length === 1) return servers[0][0];\n\n    const h = event.request.headers;\n    const lat = h[\"cloudfront-viewer-latitude\"] && h[\"cloudfront-viewer-latitude\"].value;\n    const lon = h[\"cloudfront-viewer-longitude\"] && h[\"cloudfront-viewer-longitude\"].value;\n    if (!lat || !lon) return servers[0][0];\n\n    return servers\n      .map((s) => ({\n        distance: haversineDistance(lat, lon, s[1], s[2]),\n        host: s[0],\n      }))\n      .sort((a, b) => a.distance - b.distance)[0]\n      .host;\n  }\n\n  function haversineDistance(lat1, lon1, lat2, lon2) {\n    const toRad = angle => angle * Math.PI / 180;\n    const radLat1 = toRad(lat1);\n    const radLat2 = toRad(lat2);\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) ** 2 + Math.cos(radLat1) * Math.cos(radLat2) * Math.sin(dLon / 2) ** 2;\n    return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  }\n}\n\nfunction setUrlOrigin(urlHost, override) {\n  event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n  const origin = {\n    domainName: urlHost,\n    customOriginConfig: {\n      port: 443,\n      protocol: \"https\",\n      sslProtocols: [\"TLSv1.2\"],\n    },\n    originAccessControlConfig: {\n      enabled: false,\n    }\n  };\n  override = override ?? {};\n  if (override.protocol === \"http\") {\n    delete origin.customOriginConfig;\n  }\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}\n\nfunction setS3Origin(s3Domain, override) {\n  delete event.request.headers[\"Cookies\"];\n  delete event.request.headers[\"cookies\"];\n  delete event.request.cookies;\n\n  const origin = {\n    domainName: s3Domain,\n    originAccessControlConfig: {\n      enabled: true,\n      signingBehavior: \"always\",\n      signingProtocol: \"sigv4\",\n      originType: \"s3\",\n    }\n  };\n  override = override ?? {};\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}\n\n  const kvNamespace = \"7f98\";\n\n  // Load metadata\n  let metadata;\n  try {\n    const v = await cf.kvs().get(kvNamespace + \":metadata\");\n    metadata = JSON.parse(v);\n  } catch (e) {}\n\n  await routeSite(kvNamespace, metadata);\n  return event.request;\n}",
                        "keyValueStoreAssociations": [
                            "arn:aws:cloudfront::241291598884:key-value-store/31cc2cb4-3800-4760-85bd-b1b408ce7125"
                        ],
                        "name": "inventario-staging-webCloudfrontFunctionRequest-zubowshx",
                        "publish": true,
                        "runtime": "cloudfront-js-2.0"
                    },
                    "outputs": {
                        "arn": "arn:aws:cloudfront::241291598884:function/inventario-staging-webCloudfrontFunctionRequest-zubowshx",
                        "code": "\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  \n  \n  \nasync function routeSite(kvNamespace, metadata) {\n  const baselessUri = metadata.base\n    ? event.request.uri.replace(metadata.base, \"\")\n    : event.request.uri;\n\n  // Route to S3 files\n  try {\n    // check using baselessUri b/c files are stored in the root\n    const u = decodeURIComponent(baselessUri);\n    const postfixes = u.endsWith(\"/\")\n      ? [\"index.html\"]\n      : [\"\", \".html\", \"/index.html\"];\n    const v = await Promise.any(postfixes.map(p => cf.kvs().get(kvNamespace + \":\" + u + p).then(v => p)));\n    // files are stored in a subdirectory, add it to the request uri\n    event.request.uri = metadata.s3.dir + event.request.uri + v;\n    setS3Origin(metadata.s3.domain);\n    return;\n  } catch (e) {}\n\n  // Route to S3 routes\n  if (metadata.s3 && metadata.s3.routes) {\n    for (var i=0, l=metadata.s3.routes.length; i<l; i++) {\n      const route = metadata.s3.routes[i];\n      if (baselessUri.startsWith(route)) {\n        event.request.uri = metadata.s3.dir + event.request.uri;\n        // uri ends with /, ie. /usage/ -> /usage/index.html\n        if (event.request.uri.endsWith(\"/\")) {\n          event.request.uri += \"index.html\";\n        }\n        // uri ends with non-file, ie. /usage -> /usage/index.html\n        else if (!event.request.uri.split(\"/\").pop().includes(\".\")) {\n          event.request.uri += \"/index.html\";\n        }\n        setS3Origin(metadata.s3.domain);\n        return;\n      }\n    }\n  }\n\n  // Route to S3 custom 404 (no servers)\n  if (metadata.custom404) {\n    event.request.uri = metadata.s3.dir + (metadata.base ? metadata.base : \"\") + metadata.custom404;\n    setS3Origin(metadata.s3.domain);\n    return;\n  }\n\n  // Route to image optimizer\n  if (metadata.image && baselessUri.startsWith(metadata.image.route)) {\n    setUrlOrigin(metadata.image.host);\n    return;\n  }\n\n  // Route to servers\n  if (metadata.servers){\n    event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n    \n    for (var key in event.request.querystring) {\n      if (key.includes(\"/\")) {\n        event.request.querystring[encodeURIComponent(key)] = event.request.querystring[key];\n        delete event.request.querystring[key];\n      }\n    }\n    setNextjsGeoHeaders();\n    setNextjsCacheKey();\n    setUrlOrigin(findNearestServer(metadata.servers), metadata.origin);\n  }\n\n  function setNextjsGeoHeaders() {\n    \n    if(event.request.headers[\"cloudfront-viewer-city\"]) {\n      event.request.headers[\"x-open-next-city\"] = event.request.headers[\"cloudfront-viewer-city\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-country\"]) {\n      event.request.headers[\"x-open-next-country\"] = event.request.headers[\"cloudfront-viewer-country\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-region\"]) {\n      event.request.headers[\"x-open-next-region\"] = event.request.headers[\"cloudfront-viewer-region\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-latitude\"]) {\n      event.request.headers[\"x-open-next-latitude\"] = event.request.headers[\"cloudfront-viewer-latitude\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-longitude\"]) {\n      event.request.headers[\"x-open-next-longitude\"] = event.request.headers[\"cloudfront-viewer-longitude\"];\n    }\n  }\n\n  function setNextjsCacheKey() {\n    \n    var cacheKey = \"\";\n    if (event.request.uri.startsWith(\"/_next/image\")) {\n      cacheKey = getHeader(\"accept\");\n    } else {\n      cacheKey =\n        getHeader(\"rsc\") +\n        getHeader(\"next-router-prefetch\") +\n        getHeader(\"next-router-state-tree\") +\n        getHeader(\"next-url\") +\n        getHeader(\"x-prerender-revalidate\");\n    }\n    if (event.request.cookies[\"__prerender_bypass\"]) {\n      cacheKey += event.request.cookies[\"__prerender_bypass\"]\n        ? event.request.cookies[\"__prerender_bypass\"].value\n        : \"\";\n    }\n    var crypto = require(\"crypto\");\n    var hashedKey = crypto.createHash(\"md5\").update(cacheKey).digest(\"hex\");\n    event.request.headers[\"x-open-next-cache-key\"] = { value: hashedKey };\n  }\n\n  function getHeader(key) {\n    var header = event.request.headers[key];\n    if (header) {\n      if (header.multiValue) {\n        return header.multiValue.map((header) => header.value).join(\",\");\n      }\n      if (header.value) {\n        return header.value;\n      }\n    }\n    return \"\";\n  }\n\n  function findNearestServer(servers) {\n    if (servers.length === 1) return servers[0][0];\n\n    const h = event.request.headers;\n    const lat = h[\"cloudfront-viewer-latitude\"] && h[\"cloudfront-viewer-latitude\"].value;\n    const lon = h[\"cloudfront-viewer-longitude\"] && h[\"cloudfront-viewer-longitude\"].value;\n    if (!lat || !lon) return servers[0][0];\n\n    return servers\n      .map((s) => ({\n        distance: haversineDistance(lat, lon, s[1], s[2]),\n        host: s[0],\n      }))\n      .sort((a, b) => a.distance - b.distance)[0]\n      .host;\n  }\n\n  function haversineDistance(lat1, lon1, lat2, lon2) {\n    const toRad = angle => angle * Math.PI / 180;\n    const radLat1 = toRad(lat1);\n    const radLat2 = toRad(lat2);\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) ** 2 + Math.cos(radLat1) * Math.cos(radLat2) * Math.sin(dLon / 2) ** 2;\n    return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  }\n}\n\nfunction setUrlOrigin(urlHost, override) {\n  event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n  const origin = {\n    domainName: urlHost,\n    customOriginConfig: {\n      port: 443,\n      protocol: \"https\",\n      sslProtocols: [\"TLSv1.2\"],\n    },\n    originAccessControlConfig: {\n      enabled: false,\n    }\n  };\n  override = override ?? {};\n  if (override.protocol === \"http\") {\n    delete origin.customOriginConfig;\n  }\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}\n\nfunction setS3Origin(s3Domain, override) {\n  delete event.request.headers[\"Cookies\"];\n  delete event.request.headers[\"cookies\"];\n  delete event.request.cookies;\n\n  const origin = {\n    domainName: s3Domain,\n    originAccessControlConfig: {\n      enabled: true,\n      signingBehavior: \"always\",\n      signingProtocol: \"sigv4\",\n      originType: \"s3\",\n    }\n  };\n  override = override ?? {};\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}\n\n  const kvNamespace = \"7f98\";\n\n  // Load metadata\n  let metadata;\n  try {\n    const v = await cf.kvs().get(kvNamespace + \":metadata\");\n    metadata = JSON.parse(v);\n  } catch (e) {}\n\n  await routeSite(kvNamespace, metadata);\n  return event.request;\n}",
                        "comment": "",
                        "etag": "ETVPDKIKX0DER",
                        "id": "inventario-staging-webCloudfrontFunctionRequest-zubowshx",
                        "keyValueStoreAssociations": [
                            "arn:aws:cloudfront::241291598884:key-value-store/31cc2cb4-3800-4760-85bd-b1b408ce7125"
                        ],
                        "liveStageEtag": "ETVPDKIKX0DER",
                        "name": "inventario-staging-webCloudfrontFunctionRequest-zubowshx",
                        "publish": true,
                        "runtime": "cloudfront-js-2.0",
                        "status": "UNASSOCIATED"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/keyValueStore:KeyValueStore::webKvStore"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "code": [],
                        "keyValueStoreAssociations": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/keyValueStore:KeyValueStore::webKvStore"
                        ],
                        "name": [],
                        "runtime": []
                    },
                    "created": "2025-08-02T14:43:41.2897555Z",
                    "modified": "2025-08-02T14:43:41.2897555Z",
                    "ignoreChanges": [
                        "name"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::webAssetsPublicAccessBlock",
                    "custom": true,
                    "id": "inventario-staging-webassetsbucket-rzscnzou",
                    "type": "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock",
                    "inputs": {
                        "__defaults": [],
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "outputs": {
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "id": "inventario-staging-webassetsbucket-rzscnzou",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket::webAssets",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "blockPublicAcls": [],
                        "blockPublicPolicy": [],
                        "bucket": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ],
                        "ignorePublicAcls": [],
                        "restrictPublicBuckets": []
                    },
                    "created": "2025-08-02T14:42:22.4599853Z",
                    "modified": "2025-08-02T14:42:22.4599853Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::webAssetsCors",
                    "custom": true,
                    "id": "inventario-staging-webassetsbucket-rzscnzou",
                    "type": "aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "corsRules": [
                            {
                                "__defaults": [],
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "POST",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "maxAgeSeconds": 0
                            }
                        ]
                    },
                    "outputs": {
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "corsRules": [
                            {
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "POST",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "exposeHeaders": [],
                                "id": "",
                                "maxAgeSeconds": 0
                            }
                        ],
                        "expectedBucketOwner": "",
                        "id": "inventario-staging-webassetsbucket-rzscnzou"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket::webAssets",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ],
                        "corsRules": []
                    },
                    "created": "2025-08-02T14:42:22.3519133Z",
                    "modified": "2025-08-02T14:42:22.3519133Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution",
                    "custom": true,
                    "id": "E148FX4BPVPDSH",
                    "type": "aws:cloudfront/distribution:Distribution",
                    "inputs": {
                        "__defaults": [
                            "httpVersion",
                            "isIpv6Enabled",
                            "priceClass",
                            "retainOnDelete",
                            "staging"
                        ],
                        "aliases": [],
                        "comment": "web site",
                        "defaultCacheBehavior": {
                            "__defaults": [
                                "minTtl"
                            ],
                            "allowedMethods": [
                                "DELETE",
                                "GET",
                                "HEAD",
                                "OPTIONS",
                                "PATCH",
                                "POST",
                                "PUT"
                            ],
                            "cachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                            "cachedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "compress": true,
                            "functionAssociations": [
                                {
                                    "__defaults": [],
                                    "eventType": "viewer-request",
                                    "functionArn": "arn:aws:cloudfront::241291598884:function/inventario-staging-webCloudfrontFunctionRequest-zubowshx"
                                }
                            ],
                            "minTtl": 0,
                            "targetOriginId": "default",
                            "viewerProtocolPolicy": "redirect-to-https"
                        },
                        "enabled": true,
                        "httpVersion": "http2",
                        "isIpv6Enabled": false,
                        "origins": [
                            {
                                "__defaults": [
                                    "connectionAttempts",
                                    "connectionTimeout",
                                    "originPath"
                                ],
                                "connectionAttempts": 3,
                                "connectionTimeout": 10,
                                "customOriginConfig": {
                                    "__defaults": [
                                        "originKeepaliveTimeout"
                                    ],
                                    "httpPort": 80,
                                    "httpsPort": 443,
                                    "originKeepaliveTimeout": 5,
                                    "originProtocolPolicy": "https-only",
                                    "originReadTimeout": 20,
                                    "originSslProtocols": [
                                        "TLSv1.2"
                                    ]
                                },
                                "domainName": "placeholder.sst.dev",
                                "originId": "default",
                                "originPath": ""
                            }
                        ],
                        "priceClass": "PriceClass_All",
                        "restrictions": {
                            "__defaults": [],
                            "geoRestriction": {
                                "__defaults": [],
                                "restrictionType": "none"
                            }
                        },
                        "retainOnDelete": false,
                        "staging": false,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "viewerCertificate": {
                            "__defaults": [
                                "minimumProtocolVersion"
                            ],
                            "cloudfrontDefaultCertificate": true,
                            "minimumProtocolVersion": "TLSv1"
                        },
                        "waitForDeployment": false
                    },
                    "outputs": {
                        "__meta": "{\"schema_version\":\"1\"}",
                        "aliases": null,
                        "arn": "arn:aws:cloudfront::241291598884:distribution/E148FX4BPVPDSH",
                        "callerReference": "terraform-20250802144341364900000001",
                        "comment": "web site",
                        "continuousDeploymentPolicyId": "",
                        "customErrorResponses": [],
                        "defaultCacheBehavior": {
                            "allowedMethods": [
                                "DELETE",
                                "GET",
                                "HEAD",
                                "OPTIONS",
                                "PATCH",
                                "POST",
                                "PUT"
                            ],
                            "cachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                            "cachedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "compress": true,
                            "defaultTtl": 0,
                            "fieldLevelEncryptionId": "",
                            "forwardedValues": null,
                            "functionAssociations": [
                                {
                                    "eventType": "viewer-request",
                                    "functionArn": "arn:aws:cloudfront::241291598884:function/inventario-staging-webCloudfrontFunctionRequest-zubowshx"
                                }
                            ],
                            "lambdaFunctionAssociations": [],
                            "maxTtl": 0,
                            "minTtl": 0,
                            "originRequestPolicyId": "",
                            "realtimeLogConfigArn": "",
                            "responseHeadersPolicyId": "",
                            "smoothStreaming": false,
                            "targetOriginId": "default",
                            "trustedKeyGroups": [],
                            "trustedSigners": [],
                            "viewerProtocolPolicy": "redirect-to-https"
                        },
                        "defaultRootObject": "",
                        "domainName": "d31whwn9krmyev.cloudfront.net",
                        "enabled": true,
                        "etag": "E1WOCX9AEGPDK6",
                        "hostedZoneId": "Z2FDTNDATAQYW2",
                        "httpVersion": "http2",
                        "id": "E148FX4BPVPDSH",
                        "inProgressValidationBatches": 0,
                        "isIpv6Enabled": false,
                        "lastModifiedTime": "2025-08-02 14:43:42.073 +0000 UTC",
                        "loggingConfig": null,
                        "orderedCacheBehaviors": [],
                        "originGroups": [],
                        "origins": [
                            {
                                "connectionAttempts": 3,
                                "connectionTimeout": 10,
                                "customHeaders": [],
                                "customOriginConfig": {
                                    "httpPort": 80,
                                    "httpsPort": 443,
                                    "originKeepaliveTimeout": 5,
                                    "originProtocolPolicy": "https-only",
                                    "originReadTimeout": 20,
                                    "originSslProtocols": [
                                        "TLSv1.2"
                                    ]
                                },
                                "domainName": "placeholder.sst.dev",
                                "originAccessControlId": "",
                                "originId": "default",
                                "originPath": "",
                                "originShield": null,
                                "s3OriginConfig": null,
                                "vpcOriginConfig": null
                            }
                        ],
                        "priceClass": "PriceClass_All",
                        "restrictions": {
                            "geoRestriction": {
                                "locations": [],
                                "restrictionType": "none"
                            }
                        },
                        "retainOnDelete": false,
                        "staging": false,
                        "status": "InProgress",
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "trustedKeyGroups": [
                            {
                                "enabled": false,
                                "items": []
                            }
                        ],
                        "trustedSigners": [
                            {
                                "enabled": false,
                                "items": []
                            }
                        ],
                        "viewerCertificate": {
                            "acmCertificateArn": "",
                            "cloudfrontDefaultCertificate": true,
                            "iamCertificateId": "",
                            "minimumProtocolVersion": "TLSv1",
                            "sslSupportMethod": ""
                        },
                        "waitForDeployment": false,
                        "webAclId": ""
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN::webCdn",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/function:Function::webCloudfrontFunctionRequest"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "aliases": [],
                        "comment": [],
                        "defaultCacheBehavior": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/function:Function::webCloudfrontFunctionRequest"
                        ],
                        "enabled": [],
                        "origins": [],
                        "restrictions": [],
                        "viewerCertificate": [],
                        "waitForDeployment": []
                    },
                    "created": "2025-08-02T14:43:42.5307031Z",
                    "modified": "2025-08-02T14:43:42.5307031Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::webAssetsPolicy",
                    "custom": true,
                    "id": "inventario-staging-webassetsbucket-rzscnzou",
                    "type": "aws:s3/bucketPolicy:BucketPolicy",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou/*\",\n      \"Principal\": {\n        \"Service\": \"cloudfront.amazonaws.com\"\n      }\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou/*\",\n        \"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou\"\n      ],\n      \"Principal\": \"*\",\n      \"Condition\": {\n        \"Bool\": {\n          \"aws:SecureTransport\": \"false\"\n        }\n      }\n    }\n  ]\n}"
                    },
                    "outputs": {
                        "bucket": "inventario-staging-webassetsbucket-rzscnzou",
                        "id": "inventario-staging-webassetsbucket-rzscnzou",
                        "policy": "{\"Statement\":[{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudfront.amazonaws.com\"},\"Resource\":\"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou/*\"},{\"Action\":\"s3:*\",\"Condition\":{\"Bool\":{\"aws:SecureTransport\":\"false\"}},\"Effect\":\"Deny\",\"Principal\":\"*\",\"Resource\":[\"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou/*\",\"arn:aws:s3:::inventario-staging-webassetsbucket-rzscnzou\"]}],\"Version\":\"2012-10-17\"}"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket::webAssets",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::webAssetsPublicAccessBlock",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ],
                        "policy": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ]
                    },
                    "created": "2025-08-02T14:42:22.8166406Z",
                    "modified": "2025-08-02T14:42:22.8166406Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::pulumi:providers:pulumi-nodejs::default",
                    "custom": true,
                    "id": "83196946-6acd-4afe-ab8b-541a525d614e",
                    "type": "pulumi:providers:pulumi-nodejs",
                    "inputs": {
                        "aws:defaultTags": "{\"tags\":{\"sst:app\":\"inventario\",\"sst:stage\":\"staging\"}}",
                        "aws:region": "us-east-1"
                    },
                    "outputs": {
                        "aws:defaultTags": "{\"tags\":{\"sst:app\":\"inventario\",\"sst:stage\":\"staging\"}}",
                        "aws:region": "us-east-1"
                    },
                    "created": "2025-08-02T14:42:23.8404134Z",
                    "modified": "2025-08-02T14:42:23.8404134Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::webAssetFiles.sst.aws.BucketFiles",
                    "custom": true,
                    "id": "files",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.BucketFiles\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "bucketName": "inventario-staging-webassetsbucket-rzscnzou",
                        "files": [],
                        "purge": true,
                        "region": "us-east-1"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.BucketFiles\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "bucketName": "inventario-staging-webassetsbucket-rzscnzou",
                        "purge": true,
                        "region": "us-east-1"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::webAssetsPolicy"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:pulumi-nodejs::default::83196946-6acd-4afe-ab8b-541a525d614e",
                    "propertyDependencies": {
                        "__provider": [],
                        "bucketName": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::webAssetsPolicy",
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ],
                        "files": [],
                        "purge": [],
                        "region": []
                    },
                    "created": "2025-08-02T14:42:25.4739517Z",
                    "modified": "2025-08-19T20:34:33.661857Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$pulumi-nodejs:dynamic:Resource::webCdnWaiter.sst.aws.DistributionDeploymentWaiter",
                    "custom": true,
                    "id": "waiter",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.DistributionDeploymentWaiter\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "distributionId": "E148FX4BPVPDSH",
                        "etag": "E1WOCX9AEGPDK6",
                        "wait": true
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.DistributionDeploymentWaiter\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "isDone": true
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN::webCdn",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:pulumi-nodejs::default::83196946-6acd-4afe-ab8b-541a525d614e",
                    "propertyDependencies": {
                        "__provider": [],
                        "distributionId": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution"
                        ],
                        "etag": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution"
                        ],
                        "wait": []
                    },
                    "created": "2025-08-02T14:47:36.9610079Z",
                    "modified": "2025-08-02T14:47:36.9610079Z",
                    "ignoreChanges": [
                        "*"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::webKvKeys.sst.aws.KvKeys",
                    "custom": true,
                    "id": "entries",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.KvKeys\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "entries": {
                            "metadata": "{\"custom404\":\"/index.html\",\"s3\":{\"domain\":\"inventario-staging-webassetsbucket-rzscnzou.s3.us-east-1.amazonaws.com\",\"dir\":\"\",\"routes\":[]}}"
                        },
                        "namespace": "7f98",
                        "purge": true,
                        "store": "arn:aws:cloudfront::241291598884:key-value-store/31cc2cb4-3800-4760-85bd-b1b408ce7125"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.KvKeys\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "entries": {
                            "metadata": "{\"custom404\":\"/index.html\",\"s3\":{\"domain\":\"inventario-staging-webassetsbucket-rzscnzou.s3.us-east-1.amazonaws.com\",\"dir\":\"\",\"routes\":[]}}"
                        },
                        "namespace": "7f98",
                        "purge": true,
                        "store": "arn:aws:cloudfront::241291598884:key-value-store/31cc2cb4-3800-4760-85bd-b1b408ce7125"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/keyValueStore:KeyValueStore::webKvStore",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::webAssetsPolicy",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:pulumi-nodejs::default::83196946-6acd-4afe-ab8b-541a525d614e",
                    "propertyDependencies": {
                        "__provider": [],
                        "entries": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::webAssetsPolicy",
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::webAssetsBucket"
                        ],
                        "namespace": [],
                        "purge": [],
                        "store": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$aws:cloudfront/keyValueStore:KeyValueStore::webKvStore"
                        ]
                    },
                    "created": "2025-08-02T14:43:40.1784022Z",
                    "modified": "2025-08-19T20:34:31.1845165Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:iam/role:Role::apiRole",
                    "custom": true,
                    "id": "inventario-staging-apiRole-txwfdsvc",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::241291598884:root\",\n        \"Service\": \"lambda.amazonaws.com\"\n      }\n    }\n  ]\n}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "inventario-staging-apiRole-txwfdsvc",
                        "path": "/",
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::241291598884:role/inventario-staging-apiRole-txwfdsvc",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::241291598884:root\",\"Service\":\"lambda.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2025-08-02T03:55:13Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "inventario-staging-apiRole-txwfdsvc",
                        "inlinePolicies": [],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "inventario-staging-apiRole-txwfdsvc",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "uniqueId": "AROATQLQZTQSLXFSL4TZS"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2025-08-02T03:55:13.4433489Z",
                    "modified": "2025-08-02T03:55:13.4433489Z",
                    "ignoreChanges": [
                        "name"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::webInvalidation.sst.aws.DistributionInvalidation",
                    "custom": true,
                    "id": "invalidation",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.DistributionInvalidation\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "distributionId": "E148FX4BPVPDSH",
                        "paths": [
                            "/*"
                        ],
                        "version": "99914b932bd37a50b983c5e7c90ae93b",
                        "wait": false
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"name\", { configurable: true, writable: true, value: __f2 });\nObject.setPrototypeOf(__f4, global.Error);\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__provider_proto, \"read\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f8 });\nvar __provider = Object.create(__provider_proto);\n__provider.type = \"Aws.DistributionInvalidation\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(type) {\n      this.type = type;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*name*/(action) {\n      return \"Resource.\" + this.type + \".\" + action;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __super: global.Error, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(method) {\n    __super.call(this, `Method \"${method}\" not found`);\n    this.method = method;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst http = require(\"http\");\n\nfunction __call(__0, __1) {\n  return (function() {\n    with({ MethodNotFoundError: __f4, call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*call*/(method, args) {\n    return new Promise((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const req = http.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n      req.setTimeout(0);\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args]\n      });\n      req.write(body);\n      req.end();\n    });\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0) {\n  return (function() {\n    with({ call: __call, this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n      return call(this.name(\"Create\"), inputs);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*delete*/(id, outs) {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id\n          };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7(__0, __1) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*read*/(id, props) {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1, __2) {\n  return (function() {\n    with({ call: __call, MethodNotFoundError: __f4, this: undefined, arguments: undefined }) {\n\nreturn async function /*diff*/(id, olds, news) {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:StaticSite::web",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::webAssetFiles.sst.aws.BucketFiles",
                        "urn:pulumi:staging::inventario::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::webKvKeys.sst.aws.KvKeys"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:pulumi-nodejs::default::83196946-6acd-4afe-ab8b-541a525d614e",
                    "propertyDependencies": {
                        "__provider": [],
                        "distributionId": [
                            "urn:pulumi:staging::inventario::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::webCdnDistribution"
                        ],
                        "paths": [],
                        "version": [],
                        "wait": []
                    },
                    "created": "2025-08-02T14:43:43.1019996Z",
                    "modified": "2025-08-19T20:34:34.2797404Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::apiCode",
                    "custom": true,
                    "id": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-fstbfuvounao",
                        "forceDestroy": false,
                        "key": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "2c7645119067f55c9f4b89c13f9d1b1257a873a46ac02a5df8dd679a7ef6dd64",
                            "path": "C:\\Users\\kevin\\Documents\\GITHUB\\Proyecto_que_saque_de_pobre\\Version1\\.sst\\artifacts\\api\\code.zip"
                        },
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "outputs": {
                        "acl": null,
                        "arn": "arn:aws:s3:::sst-asset-fstbfuvounao/assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "bucket": "sst-asset-fstbfuvounao",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumAlgorithm": null,
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "content": null,
                        "contentBase64": null,
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "application/octet-stream",
                        "etag": "d78a3af3e22565f2e6e9c654ffb2cceb",
                        "forceDestroy": false,
                        "id": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "key": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "kmsKeyId": null,
                        "metadata": null,
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "overrideProvider": null,
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "2c7645119067f55c9f4b89c13f9d1b1257a873a46ac02a5df8dd679a7ef6dd64",
                            "path": "C:\\Users\\kevin\\Documents\\GITHUB\\Proyecto_que_saque_de_pobre\\Version1\\.sst\\artifacts\\api\\code.zip"
                        },
                        "sourceHash": null,
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "created": "2025-08-19T20:56:23.9015531Z",
                    "modified": "2025-08-19T20:56:23.9015531Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::apiSourcemap0",
                    "custom": true,
                    "id": "sourcemap/arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh/c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.bundle.mjs.map",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-fstbfuvounao",
                        "forceDestroy": false,
                        "key": "sourcemap/arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh/c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.bundle.mjs.map",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "c44067f5952c0a294b673a41bacd8c17",
                            "hash": "51803e5dd5d1625bc31e324ee447910810f4524f0c69bc93ec138d2eb63b9deb",
                            "path": "C:\\Users\\kevin\\Documents\\GITHUB\\Proyecto_que_saque_de_pobre\\Version1\\.sst\\artifacts\\api-src\\bundle.mjs.map"
                        },
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        }
                    },
                    "outputs": {
                        "acl": null,
                        "arn": "arn:aws:s3:::sst-asset-fstbfuvounao/sourcemap/arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh/c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.bundle.mjs.map",
                        "bucket": "sst-asset-fstbfuvounao",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumAlgorithm": null,
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "content": null,
                        "contentBase64": null,
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "application/octet-stream",
                        "etag": "1664351aa72367fc61b74099dd47a328",
                        "forceDestroy": false,
                        "id": "sourcemap/arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh/c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.bundle.mjs.map",
                        "key": "sourcemap/arn:aws:logs:us-east-1:241291598884:log-group:/aws/lambda/inventario-staging-apiFunction-tseknezh/c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.bundle.mjs.map",
                        "kmsKeyId": null,
                        "metadata": null,
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "overrideProvider": null,
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "c44067f5952c0a294b673a41bacd8c17",
                            "hash": "51803e5dd5d1625bc31e324ee447910810f4524f0c69bc93ec138d2eb63b9deb",
                            "path": "C:\\Users\\kevin\\Documents\\GITHUB\\Proyecto_que_saque_de_pobre\\Version1\\.sst\\artifacts\\api-src\\bundle.mjs.map"
                        },
                        "sourceHash": null,
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2025-08-19T20:56:24.4917803Z",
                    "modified": "2025-08-19T20:56:24.4917803Z"
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:lambda/function:Function::apiFunction",
                    "custom": true,
                    "id": "inventario-staging-apiFunction-trxdnweb",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "description": "",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "v1:V9rcUM3VEEvvM/Jx:FmD1Wr9sTBTMSeKflMqpKs5y8aQfiJ6NcJBUbjL8QxejuVszWh55nH2j0yu4T8a2eDmcVHlf7mfI7OyG0QL/W//J63gwv1DB8HdoOV7nFIq46zTvtsFI5nyg+GQeVjjM0UUvaqzshfqv1gv74r30CksRnva4uvSm8P+5HDr7nG3i2jGex8VaOMwEdHREj0AXknXfhljxvAb/VDCl+Fa3/O7d8eO4FcNhP0+HCAIjcBWvFc2JTVzsHZNiJ6bfSfOmtD7dsMYd26e7S458gybYOZvbvQwYy/tIoxCHzAZEzeBnXAwNej7om/S8K4xw9pCd1pdO9yzWnH2lOPQQHSW/bYk9GEjhzXSvx9lZ/lLFQnaBVlO8xfS7oi+RDXbtZQFT/OcRyTNwDd4+CsSlVih6+qmU1ZNkyhNeRc3lq77r82Wc5zMEc4TJOsmOGO3nQJ5roMmi6DkORmg="
                            }
                        },
                        "ephemeralStorage": {
                            "__defaults": [],
                            "size": 512
                        },
                        "handler": "bundle.handler",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "inventario-staging-apiFunction-trxdnweb",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::241291598884:role/inventario-staging-apiRole-txwfdsvc",
                        "runtime": "nodejs20.x",
                        "s3Bucket": "sst-asset-fstbfuvounao",
                        "s3Key": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-east-1:241291598884:function:inventario-staging-apiFunction-trxdnweb",
                        "code": null,
                        "codeSha256": "LHZFEZBn9VyfS4nBP50bEleoc6RqwCpd+N1nmn723WQ=",
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "",
                        "environment": {
                            "variables": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "v1:tJ2muKgf6yIi6xJL:FNaLElSdlVGTD/mLuxG8K4IsArFwZp7j77+wTxzqKMli86XZpurytYBaPOPsFSTbs6PVFJZMSs2qcucAfKeMci5mib9ZcGORbUZbfALknlAG91KgVTvfsVWq9HDYy+iAp5XZ/CBP0fOGvRz4pb3Na/zP5YadUWSlg1dIJpSKutx1UlLPYwI6qbruBRro/Chz5FDWFAQoCcktn9EuhyiCnwiDZw1+hWkRG9/Fid4vNLIWwA2klAIkWlAd8DvHIcgh9/Q/5aoSY4BKYo3YZO+jiQbmJV5QN99rO0OfSpGcOgayFsdYrYlaDacceF9Vz79lzBeq3BBqDkIZL1g1WI3dIFWU8gRDYk/I2qKMIYLAE5ZVRZu9AQ2KvjzLET1Pv4514k024JNO2La4dQGOLFPSqTzAhdPTAWsAAqVkUVD7LTv4q29zWFsS8WNnKGdNqlUUJXZLkvlqdz0="
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bundle.handler",
                        "id": "inventario-staging-apiFunction-trxdnweb",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:241291598884:function:inventario-staging-apiFunction-trxdnweb/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2025-08-19T20:56:25.000+0000",
                        "layers": null,
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/inventario-staging-apiFunction-tseknezh",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "inventario-staging-apiFunction-trxdnweb",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-east-1:241291598884:function:inventario-staging-apiFunction-trxdnweb:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:241291598884:function:inventario-staging-apiFunction-trxdnweb:$LATEST/invocations",
                        "replaceSecurityGroupsOnDestroy": null,
                        "replacementSecurityGroupIds": null,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::241291598884:role/inventario-staging-apiRole-txwfdsvc",
                        "runtime": "nodejs20.x",
                        "s3Bucket": "sst-asset-fstbfuvounao",
                        "s3Key": "assets/api-code-c60879a5c818eb824caf67910cab87a1121ca2c2985ee09b13af831007b15847.zip",
                        "s3ObjectVersion": null,
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "",
                        "sourceCodeSize": 248800,
                        "tags": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "tagsAll": {
                            "sst:app": "inventario",
                            "sst:stage": "staging"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::random:index/randomBytes:RandomBytes::LambdaEncryptionKey",
                        "urn:pulumi:staging::inventario::sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::apiLogGroup",
                        "urn:pulumi:staging::inventario::sst:aws:Function$aws:iam/role:Role::apiRole",
                        "urn:pulumi:staging::inventario::sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::apiCode"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "architectures": [],
                        "description": [],
                        "environment": [
                            "urn:pulumi:staging::inventario::random:index/randomBytes:RandomBytes::LambdaEncryptionKey"
                        ],
                        "ephemeralStorage": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::apiLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "packageType": [],
                        "publish": [],
                        "role": [
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:iam/role:Role::apiRole"
                        ],
                        "runtime": [],
                        "s3Bucket": [
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::apiCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::apiCode"
                        ],
                        "timeout": []
                    },
                    "created": "2025-08-02T04:03:37.2292317Z",
                    "modified": "2025-08-19T20:56:30.9047532Z",
                    "ignoreChanges": [
                        "name"
                    ]
                },
                {
                    "urn": "urn:pulumi:staging::inventario::sst:aws:Function$aws:lambda/functionUrl:FunctionUrl::apiUrl",
                    "custom": true,
                    "id": "inventario-staging-apiFunction-trxdnweb",
                    "type": "aws:lambda/functionUrl:FunctionUrl",
                    "inputs": {
                        "__defaults": [],
                        "authorizationType": "NONE",
                        "cors": {
                            "__defaults": [],
                            "allowHeaders": [
                                "*"
                            ],
                            "allowMethods": [
                                "*"
                            ],
                            "allowOrigins": [
                                "*"
                            ]
                        },
                        "functionName": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "v1:DrQhtu+j6w+TXjkI:Ttr0dlxB7Q2XFrnjqtkG/3TT355rNAoArN1Z4uB2UFZ/TlJp3ITVgO+ywTnYNVT8xj69m2BGZ8yS"
                        },
                        "invokeMode": "BUFFERED"
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000}}",
                        "authorizationType": "NONE",
                        "cors": {
                            "allowCredentials": false,
                            "allowHeaders": [
                                "*"
                            ],
                            "allowMethods": [
                                "*"
                            ],
                            "allowOrigins": [
                                "*"
                            ],
                            "exposeHeaders": null,
                            "maxAge": 0
                        },
                        "functionArn": "arn:aws:lambda:us-east-1:241291598884:function:inventario-staging-apiFunction-trxdnweb",
                        "functionName": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "v1:48pzRVUZ1kZK+7J1:xy0nlRctP2kKlVF9UDeWOv1Op7jIMIbRUHTlWcXbZQOydHeGQA7m307J5Bn0nf4jdCFUTDp6Yhbc"
                        },
                        "functionUrl": "https://zf2diku5sbjcj3zyenbqhzzeyq0nnnvm.lambda-url.us-east-1.on.aws/",
                        "id": "inventario-staging-apiFunction-trxdnweb",
                        "invokeMode": "BUFFERED",
                        "qualifier": "",
                        "urlId": "zf2diku5sbjcj3zyenbqhzzeyq0nnnvm"
                    },
                    "parent": "urn:pulumi:staging::inventario::sst:aws:Function::api",
                    "dependencies": [
                        "urn:pulumi:staging::inventario::random:index/randomBytes:RandomBytes::LambdaEncryptionKey",
                        "urn:pulumi:staging::inventario::sst:aws:Function$aws:lambda/function:Function::apiFunction",
                        "urn:pulumi:staging::inventario::sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::apiLogGroup"
                    ],
                    "provider": "urn:pulumi:staging::inventario::pulumi:providers:aws::default_6_66_2::86a6d9c9-4e6e-4273-8a9b-245f986672b2",
                    "propertyDependencies": {
                        "authorizationType": [],
                        "cors": [],
                        "functionName": [
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::apiLogGroup",
                            "urn:pulumi:staging::inventario::random:index/randomBytes:RandomBytes::LambdaEncryptionKey",
                            "urn:pulumi:staging::inventario::sst:aws:Function$aws:lambda/function:Function::apiFunction"
                        ],
                        "invokeMode": []
                    },
                    "created": "2025-08-02T04:03:37.8512251Z",
                    "modified": "2025-08-02T04:03:37.8512251Z"
                }
            ],
            "metadata": {}
        }
    }
}
